#!/usr/bin/env ruby
$:.push File.join(File.dirname(__FILE__),'..','lib')

require 'optparse'
require 'alicorn'
require 'alicorn/profiler'


options = {}
OptionParser.new do |opts|
  opts.banner = "Alicorn Profiler is a profiling tool to use for determining
optimal settings to run alicorn at. First, run the scaler in dry-run mode
to collect statistics about your application load. Then pull that log file
and feed it into this profiler. Experiment with the options until you find
settings that work well for you. Be aware that occasional 'Overloaded!' 
situations are not necessarily bad; they just result in requests getting 
queued. Note that this profiler is inaccurate in two situations. First, it
cannot reliably detect a restart (which will reset the worker count, typically
to max). Second, if the production system is currently running with alicorn in
dry-run mode, it will not be producing accurate queued counts, which alicorn
uses to trigger panic responses (which produce fast scale-ups).
\n\nUsage: alicorn [options]"
    opts.on( '-h', '--help', 'Display this screen' ) do
      puts opts
      exit
    end

  opts.on("--min-workers N", Integer, "the minimum number of workers to scale down to") do |v|
    options[:min_workers] = v
  end

  opts.on("--max-workers N", Integer, "the maximum number of workers to scale up to") do |v|
    options[:max_workers] = v
  end

  opts.on("--buffer N", Integer, "the number of extra workers to keep for safety's sake") do |v|
    options[:buffer] = v
  end

  opts.on("--target-ratio F", Float, "the desired ratio of workers to busy workers") do |v|
    options[:target_ratio] = v
  end

  opts.on("-v", "--[no-]verbose", "turn on to write full sample data on overloads") do
    options[:verbose] = true
  end

  opts.on("--log-path PATH", String, "location of the alicorn log file to read") do |v|
    options[:log_path] = v
  end
end.parse!

options.merge!(:debug => true, :dry_run => true)

profiler = Alicorn::Profiler.new(options)
profiler.profile
